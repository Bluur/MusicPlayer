package main;

import Clases.*;
import funciones.Archivos;
import java.io.File;
import javax.swing.JFileChooser;
import java.util.ArrayList;
import javax.swing.JOptionPane;

public class App extends javax.swing.JFrame {

    /**
     * Implementa un modelo de datos abstracto para usarlo en un JTable
     *
     * @see TablaCanciones
     */
    private TablaCanciones modelo;

    public App() {
        initComponents();
        this.setTitle("App para crear listas de reproducción (Placeholder)");
        modelo = new TablaCanciones();
        jtTabla.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtTabla = new javax.swing.JTable();
        jbCargar = new javax.swing.JButton();
        jbGuardar = new javax.swing.JButton();
        jbEliminar = new javax.swing.JButton();
        jbAñadir = new javax.swing.JButton();
        jbReproducir = new javax.swing.JButton();
        jmBarra = new javax.swing.JMenuBar();
        jmArchivo = new javax.swing.JMenu();
        jmiAñadir = new javax.swing.JMenuItem();
        jmiGuardar = new javax.swing.JMenuItem();
        jmiCargar = new javax.swing.JMenuItem();
        jmiEliminar = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jmiSalir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jtTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre", "Ruta", "Duración"
            }
        ));
        jtTabla.setCellSelectionEnabled(true);
        jScrollPane1.setViewportView(jtTabla);

        jbCargar.setText("Cargar");
        jbCargar.setToolTipText("Cargar Playlist");
        jbCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCargarActionPerformed(evt);
            }
        });

        jbGuardar.setText("Guardar");
        jbGuardar.setToolTipText("Guardar Playlist");
        jbGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbGuardarActionPerformed(evt);
            }
        });

        jbEliminar.setText("Eliminar");
        jbEliminar.setToolTipText("Eliminar Canción");
        jbEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbEliminarActionPerformed(evt);
            }
        });

        jbAñadir.setText("Añadir");
        jbAñadir.setToolTipText("Añadir Canción");
        jbAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAñadirActionPerformed(evt);
            }
        });

        jbReproducir.setText("Play");
        jbReproducir.setToolTipText("Reproducir Canción");
        jbReproducir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbReproducirActionPerformed(evt);
            }
        });

        jmArchivo.setText("Archivo");

        jmiAñadir.setText("Añadir");
        jmiAñadir.setToolTipText("Añadir Canción");
        jmiAñadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAñadirActionPerformed(evt);
            }
        });
        jmArchivo.add(jmiAñadir);

        jmiGuardar.setText("Guardar");
        jmiGuardar.setToolTipText("Guardar Playlist");
        jmiGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiGuardarActionPerformed(evt);
            }
        });
        jmArchivo.add(jmiGuardar);

        jmiCargar.setText("Cargar");
        jmiCargar.setToolTipText("Cargar Playlist");
        jmiCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCargarActionPerformed(evt);
            }
        });
        jmArchivo.add(jmiCargar);

        jmiEliminar.setText("Eliminar");
        jmiEliminar.setToolTipText("Eliminar Canción");
        jmiEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiEliminarActionPerformed(evt);
            }
        });
        jmArchivo.add(jmiEliminar);
        jmArchivo.add(jSeparator1);

        jmiSalir.setText("Salir");
        jmiSalir.setToolTipText("Salir del programa");
        jmiSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSalirActionPerformed(evt);
            }
        });
        jmArchivo.add(jmiSalir);

        jmBarra.add(jmArchivo);

        setJMenuBar(jmBarra);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbAñadir, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbGuardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(12, 12, 12)
                        .addComponent(jbReproducir, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jbEliminar, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(jbCargar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jbCargar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jbGuardar, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jbEliminar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE)
                            .addComponent(jbAñadir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jbReproducir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * * <h1> Función que guarda playlist </h1>
     * <p>
     * Se encarga de crear un JDialog con el que recoger el formato en el que el
     * usuario desea guardarPlaylist la playlist, y dependiendo de su decisión,
     * llamará a la función necesaria para guardarPlaylist ese archivo en ese
     * formato
     * </p>
     * <h2> Formatos soportados: </h2>
     * <ul>
     * <li> M3U </li>
     * <li> PLS </li>
     * <li> XPFS </li>
     * </ul>
     */
    private void guardarPlaylist() {
        //Decisión del usuario
        int decision;
        //JDialog en el que recoger la decisión del usuario
        jdGuardarPlaylist guardar = new jdGuardarPlaylist(this, true);
        guardar.setVisible(true);
        if (guardar.haPulsadoAceptar) {
            decision = guardar.getDecision();
            JFileChooser guardarPlaylist = new JFileChooser();
            int seleccion = guardarPlaylist.showSaveDialog(null);

            if (seleccion == JFileChooser.APPROVE_OPTION) {
                //0 => M3U, 1 => PLS, 2 => XPFS
                String ruta = guardarPlaylist.getCurrentDirectory().getAbsolutePath();
                String nombre = guardarPlaylist.getSelectedFile().getName();
                switch (decision) {
                    case 0 -> {
                        if (Archivos.guardarPlaylistM3U(modelo.getArray(), ruta, nombre)) {
                            JOptionPane.showMessageDialog(rootPane, "Se ha guardado apropiadamente", "Success", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                    case 1 -> {
                        if (Archivos.guardarPlaylistPLS(modelo.getArray(), ruta, nombre)) {
                            JOptionPane.showMessageDialog(rootPane, "Se ha guardado apropiadamente", "Success", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                    case 2 -> {
                        if (Archivos.guardarPlaylistXSPF(modelo.getArray(), ruta, nombre)) {
                            JOptionPane.showMessageDialog(rootPane, "Se ha guardado apropiadamente", "Success", JOptionPane.INFORMATION_MESSAGE);
                        }
                    }
                }
            }
        }
    }

    /** <h2>Abre un JFileChooser con el que elegir un archivo de texto en el que
     * tenemos una playlist. Coge el nombre del archivo y comprueba la extensión
     * tras esto dependiendo de la extensión ejecutar una función u otra.
     * </h2>
     * <ul>FORMATOS ADMITIDOS:
     * <li> Formato M3U </li>
     * <li> Formato PLS </li>
     * <li> Formato XPFS </li>
     * </ul>
     *
     * @see Archivos
     *
     */
    private void cargarPlaylist() {
        JFileChooser cargarPlaylist = new JFileChooser();

        ArrayList<Cancion> canciones;
        int seleccion = cargarPlaylist.showOpenDialog(null);

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File archivo = cargarPlaylist.getSelectedFile();
            String nombreArchivo = archivo.getName();
            switch (nombreArchivo.substring(nombreArchivo.indexOf(".") + 1)) {
                case "m3u" -> {
                    canciones = Archivos.leerPlaylistM3U(archivo.getAbsolutePath());
                    modelo = new TablaCanciones(canciones);
                    jtTabla.setModel(modelo);
                }
                case "pls" -> {
                    canciones = Archivos.leerPlaylistPLS(archivo.getAbsolutePath());
                    modelo = new TablaCanciones(canciones);
                    jtTabla.setModel(modelo);
                }
                case "xspf" -> {
                    canciones = Archivos.leerPlaylistXSPF(archivo.getAbsolutePath());
                    modelo = new TablaCanciones(canciones);
                    jtTabla.setModel(modelo);
                }
                default -> {
                    JOptionPane.showMessageDialog(rootPane, "La extensión del archivo no esta soportada por el programa", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
            jtTabla.updateUI();
        }
    }

    /**
     * Elimina la/las canciones seleccionadas del JTable.
     */
    private void eliminarCanciones() {
        //Comprueba si hay selecciones en la tabla y la cantidad
        if (jtTabla.getSelectedRow() != -1 && jtTabla.getSelectedRowCount() == 1) {
            modelo.eliminarCancion(jtTabla.getSelectedRow());
        } else if (jtTabla.getSelectedRow() != -1 && jtTabla.getSelectedRowCount() > 1) {
            int[] canciones = jtTabla.getSelectedRows();
            int iteraciones = 0;
            for (int i = 0; i < canciones.length; i++) {
                modelo.eliminarCancion(canciones[i] - iteraciones);
                iteraciones++;
            }
        }
        jtTabla.updateUI();
    }

    /**
     * Crea un JDialog con el que añadir canciones de manera manual, o con un
     * JFileChooser.
     */
    private void añadirCancion() {
        JdAgregarCanciones agregar = new JdAgregarCanciones(this, true);
        agregar.setVisible(true);
        if (agregar.isContinuar()) {
            modelo.añadirCancion(agregar.getaDevolver());
            jtTabla.updateUI();
        }
    }

    private void jmiCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCargarActionPerformed
        cargarPlaylist();
    }//GEN-LAST:event_jmiCargarActionPerformed

    private void jbGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbGuardarActionPerformed
        if (modelo.getRowCount() > 0) {
            guardarPlaylist();
        } else {
            JOptionPane.showMessageDialog(rootPane, "No hay nada que guardar", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbGuardarActionPerformed

    private void jbEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbEliminarActionPerformed
        eliminarCanciones();
    }//GEN-LAST:event_jbEliminarActionPerformed

    private void jmiGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiGuardarActionPerformed
        if (modelo.getRowCount() > 0) {
            guardarPlaylist();
        } else {
            JOptionPane.showMessageDialog(rootPane, "No hay nada que guardar", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jmiGuardarActionPerformed

    private void jmiEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiEliminarActionPerformed
        eliminarCanciones();
    }//GEN-LAST:event_jmiEliminarActionPerformed

    private void jbCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCargarActionPerformed
        cargarPlaylist();
    }//GEN-LAST:event_jbCargarActionPerformed

    private void jbAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAñadirActionPerformed
        añadirCancion();
    }//GEN-LAST:event_jbAñadirActionPerformed

    private void jmiAñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAñadirActionPerformed
        añadirCancion();
    }//GEN-LAST:event_jmiAñadirActionPerformed

    /** <h2>---------------------------# TODO #---------------------</h2>
     * Esta función va a reproducir el audio seleccionado usando un JDialog
     * aparte para ejecutarlo.
     * <a href="http://dar10comyr.blogspot.com/2015/06/tips-como-reproducir-sonidos-en-java.html">...</a>
     * 
     * @param evt
     */
    private void jbReproducirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbReproducirActionPerformed
        try{
            for(int i=0; i<modelo.getRowCount();i++){
                File archivo = new File((String)modelo.getValueAt(i, 1));
                Reproductor reproductor = new Reproductor(this, true, archivo);
                reproductor.setVisible(true);
            }
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
    }//GEN-LAST:event_jbReproducirActionPerformed

    private void jmiSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jmiSalirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new App().setVisible(true);
            }
        });
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JButton jbAñadir;
    private javax.swing.JButton jbCargar;
    private javax.swing.JButton jbEliminar;
    private javax.swing.JButton jbGuardar;
    private javax.swing.JButton jbReproducir;
    private javax.swing.JMenu jmArchivo;
    private javax.swing.JMenuBar jmBarra;
    private javax.swing.JMenuItem jmiAñadir;
    private javax.swing.JMenuItem jmiCargar;
    private javax.swing.JMenuItem jmiEliminar;
    private javax.swing.JMenuItem jmiGuardar;
    private javax.swing.JMenuItem jmiSalir;
    private javax.swing.JTable jtTabla;
    // End of variables declaration//GEN-END:variables
}
